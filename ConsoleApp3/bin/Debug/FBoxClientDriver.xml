<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FBoxClientDriver</name>
    </assembly>
    <members>
        <member name="T:FBoxClientDriver.AsyncManualResetEvent">
            <summary>
            An async-compatible manual-reset event.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.AsyncManualResetEvent._sync">
            <summary>
            The object used for synchronization.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.AsyncManualResetEvent._tcs">
            <summary>
            The current state of the event.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.AsyncManualResetEvent._id">
            <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.AsyncManualResetEvent.#ctor(System.Boolean)">
            <summary>
            Creates an async-compatible manual-reset event.
            </summary>
            <param name="set">Whether the manual-reset event is initially set or unset.</param>
        </member>
        <member name="M:FBoxClientDriver.AsyncManualResetEvent.#ctor">
            <summary>
            Creates an async-compatible manual-reset event that is initially unset.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.AsyncManualResetEvent.Id">
            <summary>
            Gets a semi-unique identifier for this asynchronous manual-reset event.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.AsyncManualResetEvent.IsSet">
            <summary>
            Whether this event is currently set. This member is seldom used; code using this member has a high possibility of race conditions.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.AsyncManualResetEvent.WaitAsync">
            <summary>
            Asynchronously waits for this event to be set.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.AsyncManualResetEvent.Wait">
            <summary>
            Synchronously waits for this event to be set. This method may block the calling thread.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.AsyncManualResetEvent.Wait(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for this event to be set. This method may block the calling thread.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the wait. If this token is already canceled, this method will first check whether the event is set.</param>
        </member>
        <member name="M:FBoxClientDriver.AsyncManualResetEvent.Set">
            <summary>
            Sets the event, atomically completing every task returned by <see cref="M:FBoxClientDriver.AsyncManualResetEvent.WaitAsync"/>. If the event is already set, this method does nothing.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.AsyncManualResetEvent.Reset">
            <summary>
            Resets the event. If the event is already reset, this method does nothing.
            </summary>
        </member>
        <member name="T:FBoxClientDriver.IdManager`1">
            <summary>
            Allocates Ids for instances on demand. 0 is an invalid/unassigned Id. Ids may be non-unique in very long-running systems. This is similar to the Id system used by <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.TaskScheduler"/>.
            </summary>
            <typeparam name="TTag">The type for which ids are generated.</typeparam>
        </member>
        <member name="F:FBoxClientDriver.IdManager`1._lastId">
            <summary>
            The last id generated for this type. This is 0 if no ids have been generated.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.IdManager`1.GetId(System.Int32@)">
            <summary>
            Returns the id, allocating it if necessary.
            </summary>
            <param name="id">A reference to the field containing the id.</param>
        </member>
        <member name="T:FBoxClientDriver.TaskCompletionSource">
            <summary>
            Represents the producer side of a <see cref="T:System.Threading.Tasks.Task"/> unbound to a delegate, providing access to the consumer side through the <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> property.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.TaskCompletionSource._tcs">
            <summary>
            The underlying TCS.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.TaskCompletionSource"/> class.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.TaskCompletionSource"/> class with the specified state.
            </summary>
            <param name="state">The state to use as the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/>'s <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.#ctor(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.TaskCompletionSource"/> class with the specified options.
            </summary>
            <param name="creationOptions">The options to use when creating the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/>.</param>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.TaskCompletionSource"/> class with the specified state and options.
            </summary>
            <param name="state">The state to use as the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/>'s <see cref="P:System.IAsyncResult.AsyncState"/>.</param>
            <param name="creationOptions">The options to use when creating the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/>.</param>
        </member>
        <member name="P:FBoxClientDriver.TaskCompletionSource.Task">
            <summary>
            Gets the <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> created by this <see cref="T:FBoxClientDriver.TaskCompletionSource"/>.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.SetCanceled">
            <summary>
            Transitions the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">The underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> has already been completed.</exception>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.TrySetCanceled">
            <summary>
            Attempts to transition the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.SetException(System.Exception)">
            <summary>
            Transitions the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.
            </summary>
            <param name="exception">The exception to bind to this <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/>. May not be <c>null</c>.</param>
            <exception cref="T:System.InvalidOperationException">The underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> has already been completed.</exception>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Transitions the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.
            </summary>
            <param name="exceptions">The collection of exceptions to bind to this <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/>. May not be <c>null</c> or contain <c>null</c> elements.</param>
            <exception cref="T:System.InvalidOperationException">The underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> has already been completed.</exception>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.
            </summary>
            <param name="exception">The exception to bind to this <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/>. May not be <c>null</c>.</param>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Attempts to transition the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.
            </summary>
            <param name="exceptions">The collection of exceptions to bind to this <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/>. May not be <c>null</c> or contain <c>null</c> elements.</param>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.SetResult">
            <summary>
            Transitions the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">The underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> has already been completed.</exception>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSource.TrySetResult">
            <summary>
            Attempts to transition the underlying <see cref="P:FBoxClientDriver.TaskCompletionSource.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
            <returns><c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FBoxClientDriver.TaskCompletionSourceExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask``2(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``1})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>, propagating the completion of <paramref name="task"/>.
            </summary>
            <typeparam name="TResult">The type of the result of the target asynchronous operation.</typeparam>
            <typeparam name="TSourceResult">The type of the result of the source asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="task">The task. May not be <c>null</c>.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TryCompleteFromEventArgs``1(System.Threading.Tasks.TaskCompletionSource{``0},System.ComponentModel.AsyncCompletedEventArgs,System.Func{``0})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/>, propagating the completion of <paramref name="eventArgs"/>.
            </summary>
            <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="eventArgs">The event arguments passed to the completion event. May not be <c>null</c>.</param>
            <param name="getResult">The delegate used to retrieve the result. This is only invoked if <paramref name="eventArgs"/> indicates successful completion. May not be <c>null</c>.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask(FBoxClientDriver.TaskCompletionSource,System.Threading.Tasks.Task)">
            <summary>
            Attempts to complete a <see cref="T:FBoxClientDriver.TaskCompletionSource"/>, propagating the completion of <paramref name="task"/>.
            </summary>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="task">The task. May not be <c>null</c>.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TryCompleteFromEventArgs(FBoxClientDriver.TaskCompletionSource,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Attempts to complete a <see cref="T:FBoxClientDriver.TaskCompletionSource"/>, propagating the completion of <paramref name="eventArgs"/>.
            </summary>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="eventArgs">The event arguments passed to the completion event. May not be <c>null</c>.</param>
            <returns><c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TrySetResultWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0},``0)">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> with the specified value, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
            <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="result">The result of the asynchronous operation.</param>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TrySetResultWithBackgroundContinuations(FBoxClientDriver.TaskCompletionSource)">
            <summary>
            Attempts to complete a <see cref="T:FBoxClientDriver.TaskCompletionSource"/>, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TrySetCanceledWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> as canceled, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
            <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TrySetCanceledWithBackgroundContinuations(FBoxClientDriver.TaskCompletionSource)">
            <summary>
            Attempts to complete a <see cref="T:FBoxClientDriver.TaskCompletionSource"/> as canceled, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TrySetExceptionWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Exception)">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> as faulted, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
            <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="exception">The exception to bind to the task.</param>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TrySetExceptionWithBackgroundContinuations(FBoxClientDriver.TaskCompletionSource,System.Exception)">
            <summary>
            Attempts to complete a <see cref="T:FBoxClientDriver.TaskCompletionSource"/> as faulted, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="exception">The exception to bind to the task.</param>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TrySetExceptionWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> as faulted, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
            <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="exceptions">The exceptions to bind to the task.</param>
        </member>
        <member name="M:FBoxClientDriver.TaskCompletionSourceExtensions.TrySetExceptionWithBackgroundContinuations(FBoxClientDriver.TaskCompletionSource,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Attempts to complete a <see cref="T:FBoxClientDriver.TaskCompletionSource"/> as faulted, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
            <param name="this">The task completion source. May not be <c>null</c>.</param>
            <param name="exceptions">The exceptions to bind to the task.</param>
        </member>
        <member name="P:FBoxClientDriver.FBoxCacheManager.PlcEntityCache">
            <summary>
                PLC缓存
            </summary>
        </member>
        <member name="F:FBoxClientDriver.FBoxMonitorCacheManager._fBoxMonitorDic">
            <summary>
                key :BoxNo,hashset :MonitorList
            </summary>
        </member>
        <member name="T:FBoxClientDriver.BoxAlarmConfirmEntity">
            <summary>
            盒子报警确认实体
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmConfirmEntity.BoxId">
            <summary>
            盒子ID
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmConfirmEntity.AlarmDefUid">
            <summary>
            报警条目Id
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmConfirmEntity.Value">
            <summary>
            报警条目值
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmConfirmEntity.Name">
            <summary>
            报警条目编码
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmConfirmEntity.Message">
            <summary>
            报警消息
            </summary>
        </member>
        <member name="T:FBoxClientDriver.BoxAlarmRecoverEntity">
            <summary>
            报警还原实体
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmRecoverEntity.BoxId">
            <summary>
            盒子ID
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmRecoverEntity.AlarmDefUid">
            <summary>
            报警条目Id
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmRecoverEntity.Value">
            <summary>
            报警条目值
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmRecoverEntity.Name">
            <summary>
            报警条目编码
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmRecoverEntity.Message">
            <summary>
            报警消息
            </summary>
        </member>
        <member name="T:FBoxClientDriver.BoxAlarmSignalRTrigger">
            <summary>
            报警触发
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSignalRTrigger.Id">
            <summary>
            报警条目Id
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSignalRTrigger.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSignalRTrigger.BoxId">
            <summary>
            盒子Id
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSignalRTrigger.Name">
            <summary>
            报警条目名称（编码）
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSignalRTrigger.Status">
            <summary>
            条目状态
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSignalRTrigger.Msg">
            <summary>
            报警内容
            </summary>
        </member>
        <member name="T:FBoxClientDriver.BoxAlarmSignalRRecover">
            <summary>
            报警还原
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSignalRRecover.Id">
            <summary>
            报警条目Id
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSignalRRecover.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSignalRRecover.BoxId">
            <summary>
            盒子Id
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSignalRRecover.Name">
            <summary>
            报警条目名称（编码）
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSignalRRecover.Msg">
            <summary>
            报警内容
            </summary>
        </member>
        <member name="T:FBoxClientDriver.BoxAlarmSingalRConfirm">
            <summary>
            报警确认
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSingalRConfirm.Id">
            <summary>
            报警条目Id
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSingalRConfirm.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSingalRConfirm.BoxId">
            <summary>
            盒子Id
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSingalRConfirm.Name">
            <summary>
            报警条目名称（编码）
            </summary>
        </member>
        <member name="P:FBoxClientDriver.BoxAlarmSingalRConfirm.Msg">
            <summary>
            报警内容
            </summary>
        </member>
        <member name="T:FBoxClientDriver.EnumExtensions">
            <summary>
                枚举扩展方法
            </summary>
        </member>
        <member name="T:FBoxClientDriver.ObjectExtensions">
            <summary>
                Extension methods for the root data type object
            </summary>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.GetValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
                The get value.
            </summary>
            <param name="o">
                The o.
            </param>
            <param name="propertyInfo">
                The property info.
            </param>
            <returns>
                The <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.AsInvariantString(System.Object)">
            <summary>
                If target is null, returns null.
                Othervise returns string representation of target using invariant format provider.
            </summary>
            <param name="target">
                Target transforming to string representation. Can be null.
            </param>
            <example>
                float? number = null;
                string text1 = number.AsInvariantString();
                number = 15.7892;
                string text2 = number.AsInvariantString();
            </example>
            <remarks>
                Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.AsString(System.Object)">
            <summary>
                If target is null, returns null.
                Othervise returns string representation of target using current culture format provider.
            </summary>
            <param name="target">
                Target transforming to string representation. Can be null.
            </param>
            <example>
                float? number = null;
                string text1 = number.AsString();
                number = 15.7892;
                string text2 = number.AsString();
            </example>
            <remarks>
                Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.AsString(System.Object,System.IFormatProvider)">
            <summary>
                If target is null, returns null.
                Othervise returns string representation of target using specified format provider.
            </summary>
            <param name="target">
                Target transforming to string representation. Can be null.
            </param>
            <param name="formatProvider">
                Format provider used to transformation target to string representation.
            </param>
            <example>
                CultureInfo czech = new CultureInfo("cs-CZ");
                float? number = null;
                string text1 = number.AsString( czech );
                number = 15.7892;
                string text2 = number.AsString( czech );
            </example>
            <remarks>
                Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.CountLoopsToNull``1(``0,System.Func{``0,``0})">
            <summary>
                Counts and returns the recursive execution of the passed function until it returns null.
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="item">
                The item to start peforming on.
            </param>
            <param name="function">
                The function to be executed.
            </param>
            <returns>
                The number of executions until the function returned null
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.EqualsAny``1(``0,``0[])">
            <summary>
                Determines whether the object is equal to any of the provided values.
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="obj">
                The object to be compared.
            </param>
            <param name="values">
                The values to compare with the object.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.EqualsNone``1(``0,``0[])">
            <summary>
                Determines whether the object is equal to none of the provided values.
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="obj">
                The object to be compared.
            </param>
            <param name="values">
                The values to compare with the object.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.ExceptionIfNullOrEmpty(System.Object,System.String,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException" />
                if the the value is null.
            </summary>
            <param name="value">
                The value to test.
            </param>
            <param name="message">
                The message to display if the value is null.
            </param>
            <param name="name">
                The name of the parameter being tested.
            </param>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.FindTypeByRecursion``2(``0,System.Func{``0,``0})">
            <summary>
                Finds a type instance using a recursive call. The method is useful to find specific parents for example.
            </summary>
            <typeparam name="T">
                The source type to perform on.
            </typeparam>
            <typeparam name="K">
                The targte type to be returned
            </typeparam>
            <param name="item">
                The item to start performing on.
            </param>
            <param name="function">
                The function to be executed.
            </param>
            <returns>
                An target type instance or null.
            </returns>
            <example>
                <code>
            var tree = ...
            var node = tree.FindNodeByValue("");
            var parentByType = node.FindTypeByRecursion%lt;TheType&gt;(n =&gt; n.Parent);
            </code>
            </example>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.GetAttribute``1(System.Object)">
            <summary>
                Gets the first matching attribute defined on the data type.
            </summary>
            <typeparam name="T">
                The attribute type tp look for.
            </typeparam>
            <param name="obj">
                The object to look on.
            </param>
            <returns>
                The found attribute
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.GetAttribute``1(System.Object,System.Boolean)">
            <summary>
                Gets the first matching attribute defined on the data type.
            </summary>
            <typeparam name="T">
                The attribute type tp look for.
            </typeparam>
            <param name="obj">
                The object to look on.
            </param>
            <param name="includeInherited">
                if set to <c>true</c> includes inherited attributes.
            </param>
            <returns>
                The found attribute
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.GetAttributes``1(System.Object)">
            <summary>
                Gets all matching attribute defined on the data type.
            </summary>
            <typeparam name="T">
                The attribute type tp look for.
            </typeparam>
            <param name="obj">
                The object to look on.
            </param>
            <returns>
                The found attributes
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.GetAttributes``1(System.Object,System.Boolean)">
            <summary>
                Gets all matching attribute defined on the data type.
            </summary>
            <typeparam name="T">
                The attribute type tp look for.
            </typeparam>
            <param name="obj">
                The object to look on.
            </param>
            <param name="includeInherited">
                if set to <c>true</c> includes inherited attributes.
            </param>
            <returns>
                The found attributes
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.GetTypeDefaultValue``1(``0)">
            <summary>
                Gets the type default value for the underlying data type, in case of reference types: null
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="value">
                The value.
            </param>
            <returns>
                The default value
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.IsNotNull(System.Object)">
            <summary>
                Returns TRUE, if specified target reference is equals with null reference.
                Othervise returns FALSE.
            </summary>
            <param name="target">
                Target reference. Can be null.
            </param>
            <remarks>
                Some types has overloaded '==' and '!=' operators.
                So the code "null == ((MyClass)null)" can returns <c>false</c>.
                The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)"
                method.
                However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
                Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
                object someObject = GetSomeObject();
                if ( someObject.IsNotNull() ) { /* the someObject is not null */ }
                else { /* the someObject is null */ }
            </example>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.IsNotNull``1(``0)">
            <summary>
                Returns TRUE, if specified target reference is equals with null reference.
                Othervise returns FALSE.
            </summary>
            <typeparam name="T">
                Type of target.
            </typeparam>
            <param name="target">
                Target reference. Can be null.
            </param>
            <remarks>
                Some types has overloaded '==' and '!=' operators.
                So the code "null == ((MyClass)null)" can returns <c>false</c>.
                The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)"
                method.
                However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
                Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
                MyClass someObject = GetSomeObject();
                if ( someObject.IsNotNull() ) { /* the someObject is not null */ }
                else { /* the someObject is null */ }
            </example>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.IsNull(System.Object)">
            <summary>
                Returns TRUE, if specified target reference is equals with null reference.
                Othervise returns FALSE.
            </summary>
            <param name="target">
                Target reference. Can be null.
            </param>
            <remarks>
                Some types has overloaded '==' and '!=' operators.
                So the code "null == ((MyClass)null)" can returns <c>false</c>.
                The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)"
                method.
                However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
                Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
                object someObject = GetSomeObject();
                if ( someObject.IsNull() ) { /* the someObject is null */ }
                else { /* the someObject is not null */ }
            </example>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.IsNull``1(``0)">
            <summary>
                Returns TRUE, if specified target reference is equals with null reference.
                Othervise returns FALSE.
            </summary>
            <typeparam name="T">
                Type of target.
            </typeparam>
            <param name="target">
                Target reference. Can be null.
            </param>
            <remarks>
                Some types has overloaded '==' and '!=' operators.
                So the code "null == ((MyClass)null)" can returns <c>false</c>.
                The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)"
                method.
                However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
                Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
                MyClass someObject = GetSomeObject();
                if ( someObject.IsNull() ) { /* the someObject is null */ }
                else { /* the someObject is not null */ }
            </example>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.IsOfType``1(System.Object)">
            <summary>
                Determines whether the object is exactly of the passed generic type.
            </summary>
            <typeparam name="T">
                The target type.
            </typeparam>
            <param name="obj">
                The object to check.
            </param>
            <returns>
                <c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.IsOfType(System.Object,System.Type)">
            <summary>
                Determines whether the object is excactly of the passed type
            </summary>
            <param name="obj">
                The object to check.
            </param>
            <param name="type">
                The target type.
            </param>
            <returns>
                <c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.IsOfTypeOrInherits``1(System.Object)">
            <summary>
                Determines whether the object is of the passed generic type or inherits from it.
            </summary>
            <typeparam name="T">
                The target type.
            </typeparam>
            <param name="obj">
                The object to check.
            </param>
            <returns>
                <c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.IsOfTypeOrInherits(System.Object,System.Type)">
            <summary>
                Determines whether the object is of the passed type or inherits from it.
            </summary>
            <param name="obj">
                The object to check.
            </param>
            <param name="type">
                The target type.
            </param>
            <returns>
                <c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.NotNull``1(``0,``0)">
            <summary>
                If target is null reference, returns notNullValue.
                Othervise returns target.
            </summary>
            <typeparam name="T">
                Type of target.
            </typeparam>
            <param name="target">
                Target which is maybe null. Can be null.
            </param>
            <param name="notNullValue">
                Value used instead of null.
            </param>
            <example>
                const int DEFAULT_NUMBER = 123;
                int? number = null;
                int notNullNumber1 = number.NotNull( DEFAULT_NUMBER ).Value; // returns 123
                number = 57;
                int notNullNumber2 = number.NotNull( DEFAULT_NUMBER ).Value; // returns 57
            </example>
            <remarks>
                Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.NotNull``1(``0,System.Func{``0})">
            <summary>
                If target is null reference, returns result from notNullValueProvider.
                Othervise returns target.
            </summary>
            <typeparam name="T">
                Type of target.
            </typeparam>
            <param name="target">
                Target which is maybe null. Can be null.
            </param>
            <param name="notNullValueProvider">
                Delegate which return value is used instead of null.
            </param>
            <example>
                int? number = null;
                int notNullNumber1 = number.NotNull( ()=&gt; GetRandomNumber(10, 20) ).Value; // returns random number from 10 to
                20
                number = 57;
                int notNullNumber2 = number.NotNull( ()=&gt; GetRandomNumber(10, 20) ).Value; // returns 57
            </example>
            <remarks>
                Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <returns>
                The <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.ToType``1(System.Object)">
            <summary>
                The type you want to cast or convert too. Object must match casting type passed.
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="anonymousObject">Current object. Can not be null.</param>
            <returns>new instance of type</returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.In(System.Object,System.Collections.IEnumerable)">
            <summary>
                Determines if the object is in the specific list.
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.DefinesAttribute(System.Object,System.Type)">
            <summary>
                Returns true if the object is marked with the specified attribute
            </summary>
            <param name="object">
                The object.
            </param>
            <param name="attributeType">
                The attribute Type.
            </param>
        </member>
        <member name="M:FBoxClientDriver.ObjectExtensions.To``1(System.Object)">
            <summary>
                <para>Tries to convert given object to specified type and throws exception on failure.</para>
            </summary>
            <typeparam name="T">Type to convert object to.</typeparam>
            <param name="self">Object to convert.</param>
            <returns>Object, converted to the specified type.</returns>
            <exception cref="T:System.InvalidCastException">If conversion to specified type cannot be performed.</exception>
            <remarks>If specified object instance is a <c>null</c> reference, a <c>null</c> reference will be returned as a result.</remarks>
            <seealso cref="!:As&lt;T&gt;" />
        </member>
        <member name="M:FBoxClientDriver.FBoxClientManager.#ctor(System.String,System.String,System.String,FBoxClientDriver.Contract.ICredentialProvider,System.String,Microsoft.Extensions.Logging.ILoggerFactory,FBoxClientDriver.SignalRTransportType)">
            <summary>
                构造函数
            </summary>
            <param name="idServer">IdServer地址</param>
            <param name="mainUrl">主服务器地址</param>
            <param name="hdataServerUrl">历史记录服务器地址</param>
            <param name="credentialProvider">
                <see cref="T:FBoxClientDriver.Contract.ICredentialProvider" />
            </param>
            <param name="clientId">x-fbox-clientId</param>
            <param name="loggerFactory">microsoft.extensions.logging logger factory</param>
            <param name="signalRTransports"></param>
        </member>
        <member name="M:FBoxClientDriver.FBoxClientManager.#ctor(System.String,System.String,System.String,System.String,FBoxClientDriver.Contract.ICredentialProvider,System.String,Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean,FBoxClientDriver.SignalRTransportType)">
            <summary>
                构造函数
            </summary>
            <param name="idServer">Id server地址</param>
            <param name="mainUrl">主服务器地址</param>
            <param name="hdataServerUrl">历史记录服务器地址</param>
            <param name="csUrl">cs的url</param>
            <param name="credentialProvider">用户信息</param>
            <param name="clientId">x-fbox-clientId</param>
            <param name="loggerFactory">microsoft.extensions.logging logger factory</param>
            <param name="signalrNeedReconnect">signalr是否重连</param>
            <param name="signalRTransports"></param>
        </member>
        <member name="M:FBoxClientDriver.FBoxClientManager.#ctor(FBoxClientDriver.Contract.ICredentialProvider,System.String,System.String,System.String,System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                构造函数
            </summary>
            <param name="credentialProvider">
                <see cref="T:FBoxClientDriver.Contract.ICredentialProvider" />
            </param>
            <param name="idServer">Id Server地址</param>
            <param name="mainBoxUrl">主服务器地址</param>
            <param name="mainSignalRUrl">主服务器signalR</param>
            <param name="clientId">x-fbox-clientId</param>
            <param name="loggerFactory">microsoft.extensions.logging logger factory</param>
        </member>
        <member name="M:FBoxClientDriver.FBoxClientManager.#ctor(FBoxClientDriver.Contract.ICredentialProvider,System.String,System.String,System.String,System.String,FBoxClientDriver.SignalRTransportType,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                构造函数
            </summary>
            <param name="credentialProvider">
                <see cref="T:FBoxClientDriver.Contract.ICredentialProvider" />
            </param>
            <param name="idServer">Id Server地址</param>
            <param name="mainBoxUrl">主服务器地址</param>
            <param name="mainSignalRUrl">主服务器signalR</param>
            <param name="clientId">x-fbox-clientId</param>
            <param name="loggerFactory">microsoft.extensions.logging logger factory</param>
            <param name="signalRTransports"></param>
        </member>
        <member name="T:FBoxClientDriver.PlcDownLoadHelper">
            <summary>
            下载PLC组包
            </summary>
        </member>
        <member name="M:FBoxClientDriver.PlcDownLoadHelper.BuildDownLoad(FBoxClientDriver.Contract.RetryType,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            单个PLC组包
            </summary>
            <param name="retryType">重试类型</param>
            <param name="isenborad">是否启用广播站号</param>
            <param name="hardware">串口：0 ,CAN:1(不支持),TCP:2</param>
            <param name="portNo">COM1：0 ,COM2：1，COM3：2, 网络：4096开始</param>
            <param name="workModel">工作模式：0:RS232,1:RS485-4,2:RS485-2</param>
            <param name="resvered1">保留字段（用于字节序）</param>
            <param name="resvered2">保留字段（用于字节序）</param>
            <param name="databits">数据位(TCP端口号的低字节,CAN硬件端口号)[串口里的数据位，TCP端口号的低字节]</param>
            <param name="checkbits">校验位[串口里的校验位，TCP端口号的高字节]</param>
            <param name="baudrate">波特率[串口的波特率，TCP的IP地址]大端 (长度4)</param>
            <param name="stopbits">停止位 [网络接写0]</param>
            <param name="masterSlaveMode">0-主模式,1-从模式，2-主从模式 [服务从模式，其他都为主模式]</param>
            <param name="plcDrvNo">主模式通讯驱动程序号[deviceId]</param>
            <param name="plcResponseTime">PLC超时常数[高级设置里的通讯超时时间]</param>
            <param name="protocoltimeout1">协议超时常数1</param>
            <param name="protocoltimeout2">协议超时常数2</param>
            <param name="slaveNo">从设备号</param>
            <param name="maxblockwords">字最大组包长度</param>
            <param name="maxblockbits">位最大组包长度</param>
            <param name="maxspacewords">字组包间隔</param>
            <param name="maxspacebits">位组包间隔</param>
            <param name="cominterval">通信时间间隔</param>
            <param name="alarmInfDisptms">提示信息持续时间</param>
            <param name="retryCount">出错后的重试次数</param>
            <param name="broadno">广播站号[默认是0]</param>
            <param name="plcType">0:串口 2：TCP</param>
            <returns></returns>
        </member>
        <member name="T:FBoxClientDriver.Impl.ClientCredential">
            <summary>
            密钥实现
            </summary>
        </member>
        <member name="P:FBoxClientDriver.Impl.ClientCredential.ClientId">
            <summary>
            客户端ID
            </summary>
        </member>
        <member name="P:FBoxClientDriver.Impl.ClientCredential.ClientSecret">
            <summary>
            密钥
            </summary>
        </member>
        <member name="T:FBoxClientDriver.Impl.DefaultCredentialProvider">
            <summary>
            密钥帮助默认实现
            </summary>
        </member>
        <member name="M:FBoxClientDriver.Impl.DefaultCredentialProvider.#ctor">
            <summary>
            构造函数 （若使用全部参数则使用默认构造函数，然后参数逐一赋值）
            </summary>
        </member>
        <member name="M:FBoxClientDriver.Impl.DefaultCredentialProvider.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="clientId">客户端ID</param>
            <param name="clientSecret">客户端密钥</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:FBoxClientDriver.Impl.DefaultCredentialProvider.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="clientId">客户端ID</param>
            <param name="clientSecret">客户端密钥</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <param name="cacheDirectory">缓存路径</param>
        </member>
        <member name="M:FBoxClientDriver.Impl.DefaultCredentialProvider.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>        
            <param name="clientId">客户端ID</param>
            <param name="clientSecret">客户端密钥</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <param name="cacheDirectory">缓存路径</param>
            <param name="cacheName">缓存名称</param>
        </member>
        <member name="P:FBoxClientDriver.Impl.DefaultCredentialProvider.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:FBoxClientDriver.Impl.DefaultCredentialProvider.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:FBoxClientDriver.Impl.DefaultCredentialProvider.ClientId">
            <summary>
            客户端ID
            </summary>
        </member>
        <member name="P:FBoxClientDriver.Impl.DefaultCredentialProvider.ClientSecret">
            <summary>
            客户端密钥
            </summary>
        </member>
        <member name="P:FBoxClientDriver.Impl.DefaultCredentialProvider.RefreshTokenStorePath">
            <summary>
            RefreshToken 存储路径
            </summary>
        </member>
        <member name="P:FBoxClientDriver.Impl.DefaultCredentialProvider.CacheDirectory">
            <summary>
            自定义路径
            </summary>
        </member>
        <member name="P:FBoxClientDriver.Impl.DefaultCredentialProvider.CacheName">
            <summary>
            RefreshToken存的名称
            </summary>
        </member>
        <member name="M:FBoxClientDriver.Impl.DefaultCredentialProvider.SetRefreshToken(System.String)">
            <summary>
            设置RefreshToken
            </summary>
            <param name="refreshtoken"></param>
        </member>
        <member name="M:FBoxClientDriver.Impl.DefaultCredentialProvider.GetRefreshToken">
            <summary>
            获取RefrehsToken
            </summary>
            <returns></returns>
        </member>
        <member name="T:FBoxClientDriver.Impl.UserCredential">
            <summary>
            用户凭证
            </summary>
        </member>
        <member name="P:FBoxClientDriver.Impl.UserCredential.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:FBoxClientDriver.Impl.UserCredential.Password">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter">
            <summary>
            Abstract <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> class to support Bson and Json.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter"/> class.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.#ctor(FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter"/> class.
            </summary>
            <param name="formatter">The <see cref="T:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter"/> instance to copy settings from.</param>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.SerializerSettings">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to configure the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.CreateDefaultSerializerSettings">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> instance with the default settings used by the <see cref="T:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter"/>.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.CanReadType(System.Type)">
            <summary>
            Determines whether this <see cref="T:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter"/> can read objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of object that will be read.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be read, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.CanWriteType(System.Type)">
            <summary>
            Determines whether this <see cref="T:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter"/> can write objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of object that will be written.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be written, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,FBoxClientDriver.NetHttp.IFormatterLogger)">
            <summary>
            Called during deserialization to read an object of the specified <paramref name="type"/>
            from the specified <paramref name="readStream"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of object to read.</param>
            <param name="readStream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> for the content being written.</param>
            <param name="formatterLogger">The <see cref="T:FBoxClientDriver.NetHttp.IFormatterLogger"/> to log events to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> whose result will be the object instance that has been read.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Text.Encoding,FBoxClientDriver.NetHttp.IFormatterLogger)">
            <summary>
            Called during deserialization to read an object of the specified <paramref name="type"/>
            from the specified <paramref name="readStream"/>.
            </summary>
            <remarks>
            Public for delegating wrappers of this class.  Expected to be called only from
            <see cref="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,FBoxClientDriver.NetHttp.IFormatterLogger)"/>.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> of object to read.</param>
            <param name="readStream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="effectiveEncoding">The <see cref="T:System.Text.Encoding"/> to use when reading.</param>
            <param name="formatterLogger">The <see cref="T:FBoxClientDriver.NetHttp.IFormatterLogger"/> to log events to.</param>
            <returns>The <see cref="T:System.Object"/> instance that has been read.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.CreateJsonReader(System.Type,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Called during deserialization to get the <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <remarks>
            Public for delegating wrappers of this class.  Expected to be called only from
            <see cref="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,FBoxClientDriver.NetHttp.IFormatterLogger)"/>.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> of object to read.</param>
            <param name="readStream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="effectiveEncoding">The <see cref="T:System.Text.Encoding"/> to use when reading.</param>
            <returns>The <see cref="T:Newtonsoft.Json.JsonWriter"/> used during deserialization.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.CreateJsonSerializer">
            <summary>
            Called during serialization and deserialization to get the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <remarks>
            Public for delegating wrappers of this class.  Expected to be called only from
            <see cref="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,FBoxClientDriver.NetHttp.IFormatterLogger)"/> and <see cref="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>The <see cref="T:Newtonsoft.Json.JsonSerializer"/> used during serialization and deserialization.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Called during serialization to write an object of the specified <paramref name="type"/>
            to the specified <paramref name="writeStream"/>.
            </summary>
            <remarks>
            Public for delegating wrappers of this class.  Expected to be called only from
            <see cref="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)"/>.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> of object to write.</param>
            <param name="value">The object to write.</param>
            <param name="writeStream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="effectiveEncoding">The <see cref="T:System.Text.Encoding"/> to use when writing.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.CreateJsonWriter(System.Type,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Called during serialization to get the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <remarks>
            Public for delegating wrappers of this class.  Expected to be called only from
            <see cref="M:FBoxClientDriver.NetHttp.BaseJsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)"/>.
            </remarks>
            <param name="type">The <see cref="T:System.Type"/> of object to write.</param>
            <param name="writeStream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="effectiveEncoding">The <see cref="T:System.Text.Encoding"/> to use when writing.</param>
            <returns>The <see cref="T:Newtonsoft.Json.JsonWriter"/> used during serialization.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.CollectionExtensions">
            <summary>
            Helper extension methods for fast use of collections.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.AppendAndReallocate``1(``0[],``0)">
            <summary>
            Return a new array with the value added to the end. Slow and best suited to long lived arrays with few writes relative to reads.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.AsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as an Array, copying if required. Optimized for common case where it is an Array. 
            Avoid mutating the return value.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.AsCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as a Collection of T, copying if required. Optimized for the common case where it is 
            a Collection of T and avoiding a copy if it implements IList of T. Avoid mutating the return value.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.AsIList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as a IList of T, copying if required. Avoid mutating the return value.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as a List of T, copying if required. Optimized for common case where it is an List of T 
            or a ListWrapperCollection of T. Avoid mutating the return value.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.RemoveFrom``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Remove values from the list starting at the index start.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.SingleDefaultOrError``2(System.Collections.Generic.IList{``0},System.Action{``1},``1)">
            <summary>
            Return the only value from list, the type's default value if empty, or call the errorAction for 2 or more.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.SingleOfTypeDefaultOrError``3(System.Collections.Generic.IList{``0},System.Action{``2},``2)">
            <summary>
            Returns a single value in list matching type TMatch if there is only one, null if there are none of type TMatch or calls the
            errorAction with errorArg1 if there is more than one.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.ToArrayWithoutNulls``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Convert an ICollection to an array, removing null values. Fast path for case where there are no null values.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.ToDictionaryFast``2(``1[],System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Convert the array to a Dictionary using the keySelector to extract keys from values and the specified comparer. Optimized for array input.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.ToDictionaryFast``2(System.Collections.Generic.IList{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Convert the list to a Dictionary using the keySelector to extract keys from values and the specified comparer. Optimized for IList of T input with fast path for array.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.ToDictionaryFast``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Convert the enumerable to a Dictionary using the keySelector to extract keys from values and the specified comparer. Fast paths for array and IList of T.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.CollectionExtensions.ToDictionaryFastNoCheck``2(System.Collections.Generic.IList{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Convert the list to a Dictionary using the keySelector to extract keys from values and the specified comparer. Optimized for IList of T input. No checking for other types.
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.DelegatingEnumerable`1">
            <summary>
            Helper class to serialize <see cref="T:System.Collections.Generic.IEnumerable`1"/> types by delegating them through a concrete implementation."/>.
            </summary>
            <typeparam name="T">The interface implementing <see cref="T:System.Collections.Generic.IEnumerable`1"/> to proxy.</typeparam>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.DelegatingEnumerable`1.#ctor">
            <summary>
            Initialize a DelegatingEnumerable. This constructor is necessary for <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> to work.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.DelegatingEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialize a DelegatingEnumerable with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. This is a helper class to proxy <see cref="T:System.Collections.Generic.IEnumerable`1"/> interfaces for <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance to get the enumerator from.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.DelegatingEnumerable`1.GetEnumerator">
            <summary>
            Get the enumerator of the associated <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>The enumerator of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> source.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.DelegatingEnumerable`1.Add(System.Object)">
            <summary>
            This method is not implemented but is required method for serialization to work. Do not use.
            </summary>
            <param name="item">The item to add. Unused.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.DelegatingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator of the associated <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>The enumerator of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> source.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Error">
            <summary>
            Utility class for creating and unwrapping <see cref="T:System.Exception"/> instances.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.Format(System.String,System.Object[])">
            <summary>
            Formats the specified resource string using <see cref="M:CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.Argument(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.Argument(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.ArgumentUriNotHttpOrHttpsScheme(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an "http" or "https" URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.ArgumentUriNotAbsolute(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.ArgumentUriHasQueryOrFragment(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI 
            without a query or fragment identifier and then logs it with <see cref="F:TraceLevel.Error"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.PropertyNull">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.ArgumentNull(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.ArgumentNull(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a default message.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.ArgumentOutOfRange(System.String,System.Object,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.ArgumentMustBeGreaterThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be greater than or equal to <paramref name="minValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="minValue">The minimum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.ArgumentMustBeLessThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be less than or equal to <paramref name="maxValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="maxValue">The maximum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.KeyNotFound">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.KeyNotFound(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.ObjectDisposed(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ObjectDisposedException"/> initialized according to guidelines.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.OperationCanceled">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.OperationCanceled(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.InvalidEnumArgument(System.String,System.Int32,System.Type)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> for an invalid enum argument.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.InvalidOperation(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.InvalidOperation(System.Exception,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="innerException">Inner exception</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Error.NotSupported(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.FormattingUtilities">
            <summary>
            Provides various internal utility functions
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.Match">
            <summary>
            Quality factor to indicate a perfect match.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.NoMatch">
            <summary>
            Quality factor to indicate no match.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.DefaultMaxDepth">
            <summary>
            The default max depth for our formatter is 256
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.DefaultMinDepth">
            <summary>
            The default min depth for our formatter is 1
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.HttpRequestedWithHeader">
            <summary>
            HTTP X-Requested-With header field name
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.HttpRequestedWithHeaderValue">
            <summary>
            HTTP X-Requested-With header field value
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.HttpHostHeader">
            <summary>
            HTTP Host header field name
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.HttpVersionToken">
            <summary>
            HTTP Version token
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.HttpRequestMessageType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.HttpResponseMessageType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.HttpContentType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Net.Http.HttpContent"/>.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.DelegatingEnumerableGenericType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:FBoxClientDriver.NetHttp.DelegatingEnumerable`1"/>.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.EnumerableInterfaceGenericType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.FormattingUtilities.QueryableInterfaceGenericType">
            <summary>
            A <see cref="T:System.Type"/> representing <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormattingUtilities.IsJTokenType(System.Type)">
            <summary>
            Determines whether <paramref name="type"/> is a <see cref="T:Newtonsoft.Json.Linq.JToken"/> type.
            </summary>
            <param name="type">The type to test.</param>
            <returns>
              <c>true</c> if <paramref name="type"/> is a <see cref="T:Newtonsoft.Json.Linq.JToken"/> type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormattingUtilities.CreateEmptyContentHeaders">
            <summary>
            Creates an empty <see cref="T:System.Net.Http.Headers.HttpContentHeaders"/> instance. The only way is to get it from a dummy 
            <see cref="T:System.Net.Http.HttpContent"/> instance.
            </summary>
            <returns>The created instance.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormattingUtilities.UnquoteToken(System.String)">
            <summary>
            Remove bounding quotes on a token if present
            </summary>
            <param name="token">Token to unquote.</param>
            <returns>Unquoted token.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormattingUtilities.TryParseInt32(System.String,System.Int32@)">
            <summary>
            Parses valid integer strings with no leading signs, whitespace or other <see cref="T:System.Globalization.NumberStyles"/>
            </summary>
            <param name="value">The value to parse</param>
            <param name="result">The result</param>
            <returns>True if value was valid; false otherwise.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.FormDataCollection">
            <summary>
            Represent the form data.
            - This has 100% fidelity (including ordering, which is important for deserializing ordered array). 
            - using interfaces allows us to optimize the implementation. E.g., we can avoid eagerly string-splitting a 10gb file. 
            - This also provides a convenient place to put extension methods. 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormDataCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initialize a form collection around incoming data. 
            The key value enumeration should be immutable. 
            </summary>
            <param name="pairs">incoming set of key value pairs. Ordering is preserved.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormDataCollection.#ctor(System.Uri)">
            <summary>
            Initialize a form collection from a query string. 
            Uri and FormURl body have the same schema. 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormDataCollection.#ctor(System.String)">
            <summary>
            Initialize a form collection from a URL encoded query string. Any leading question
            mark (?) will be considered part of the query string and treated as any other value.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.FormDataCollection.Item(System.String)">
            <summary>
            Gets values associated with a given key. If there are multiple values, they're concatenated.
            </summary>
            <param name="name">The name of the entry that contains the values to get. The name can be null.</param>
            <returns>Values associated with a given key. If there are multiple values, they're concatenated.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormDataCollection.ReadAsNameValueCollection">
            <summary>
            Get the collection as a NameValueCollection.
            Beware this loses some ordering. Values are ordered within a key,
            but keys are no longer ordered against each other.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormDataCollection.Get(System.String)">
            <summary>
            Get values associated with a given key. If there are multiple values, they're concatenated. 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormDataCollection.GetValues(System.String)">
            <summary>
            Get a value associated with a given key. 
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.FormUrlEncodedJson">
            <summary>
            This class provides a low-level API for parsing HTML form URL-encoded data, also known as <c>application/x-www-form-urlencoded</c> 
            data. The output of the parser is a <see cref="T:Newtonsoft.Json.Linq.JObject"/> instance. 
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedJson.Parse(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Parses a collection of query string values as a <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            <param name="nameValuePairs">The collection of query string name-value pairs parsed in lexical order. Both names
            and values must be un-escaped so that they don't contain any <see cref="T:System.Uri"/> encoding.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JObject"/> corresponding to the given query string values.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedJson.Parse(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Int32)">
            <summary>
            Parses a collection of query string values as a <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            <param name="nameValuePairs">The collection of query string name-value pairs parsed in lexical order. Both names
            and values must be un-escaped so that they don't contain any <see cref="T:System.Uri"/> encoding.</param>
            <param name="maxDepth">The maximum depth of object graph encoded as <c>x-www-form-urlencoded</c>.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JObject"/> corresponding to the given query string values.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedJson.TryParse(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Newtonsoft.Json.Linq.JObject@)">
            <summary>
            Parses a collection of query string values as a <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            <param name="nameValuePairs">The collection of query string name-value pairs parsed in lexical order. Both names
            and values must be un-escaped so that they don't contain any <see cref="T:System.Uri"/> encoding.</param>
            <param name="value">The parsed result or null if parsing failed.</param>
            <returns><c>true</c> if <paramref name="nameValuePairs"/> was parsed successfully; otherwise false.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedJson.TryParse(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Int32,Newtonsoft.Json.Linq.JObject@)">
            <summary>
            Parses a collection of query string values as a <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            <param name="nameValuePairs">The collection of query string name-value pairs parsed in lexical order. Both names
            and values must be un-escaped so that they don't contain any <see cref="T:System.Uri"/> encoding.</param>
            <param name="maxDepth">The maximum depth of object graph encoded as <c>x-www-form-urlencoded</c>.</param>
            <param name="value">The parsed result or null if parsing failed.</param>
            <returns><c>true</c> if <paramref name="nameValuePairs"/> was parsed successfully; otherwise false.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ParseInternal(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Int32,System.Boolean)">
            <summary>
            Parses a collection of query string values as a <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <remarks>This is a low-level API intended for use by other APIs. It has been optimized for performance and 
            is not intended to be called directly from user code.</remarks>
            <param name="nameValuePairs">The collection of query string name-value pairs parsed in lexical order. Both names
            and values must be un-escaped so that they don't contain any <see cref="T:System.Uri"/> encoding.</param>
            <param name="maxDepth">The maximum depth of object graph encoded as <c>x-www-form-urlencoded</c>.</param>
            <param name="throwOnError">Indicates whether to throw an exception on error or return false</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JObject"/> corresponding to the given query string values.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ArrayCandidate">
            <summary>
            Class that wraps key-value pairs.
            </summary>
            <remarks>
            This use of this class avoids a FxCop warning CA908 which happens if using various generic types.
            </remarks>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ArrayCandidate.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ArrayCandidate"/> class.
            </summary>
            <param name="key">The key of this <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ArrayCandidate"/> instance.</param>
            <param name="value">The value of this <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ArrayCandidate"/> instance.</param>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ArrayCandidate.Key">
            <summary>
            Gets or sets the key of this <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ArrayCandidate"/> instance.
            </summary>
            <value>
            The key of this <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ArrayCandidate"/> instance.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ArrayCandidate.Value">
            <summary>
            Gets or sets the value of this <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ArrayCandidate"/> instance.
            </summary>
            <value>
            The value of this <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedJson.ArrayCandidate"/> instance.
            </value>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter">
            <summary>
            <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> class for handling HTML form URL-ended data, also known as <c>application/x-www-form-urlencoded</c>. 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter"/> class.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter.#ctor(FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter"/> class.
            </summary>
            <param name="formatter">The <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter"/> instance to copy settings from.</param>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter.DefaultMediaType">
            <summary>
            Gets the default media type for HTML Form URL encoded data, namely <c>application/x-www-form-urlencoded</c>.
            </summary>
            <value>
            Because <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> is mutable, the value
            returned will be a new instance every time.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed by this formatter.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter.ReadBufferSize">
            <summary>
            Gets or sets the size of the buffer when reading the incoming stream.
            </summary>
            <value>
            The size of the read buffer.
            </value>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter.CanReadType(System.Type)">
            <summary>
            Determines whether this <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter"/> can read objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be read.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be read, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter.CanWriteType(System.Type)">
            <summary>
            Determines whether this <see cref="T:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter"/> can write objects
            of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of object that will be written.</param>
            <returns><c>true</c> if objects of this <paramref name="type"/> can be written, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,FBoxClientDriver.NetHttp.IFormatterLogger)">
            <summary>
            Called during deserialization to read an object of the specified <paramref name="type"/>
            from the specified <paramref name="readStream"/>.
            </summary>
            <param name="type">The type of object to read.</param>
            <param name="readStream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> for the content being read.</param>
            <param name="formatterLogger">The <see cref="T:FBoxClientDriver.NetHttp.IFormatterLogger"/> to log events to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> whose result will be the object instance that has been read.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.FormUrlEncodedMediaTypeFormatter.ReadFormUrlEncoded(System.IO.Stream,System.Int32)">
            <summary>
            Reads all name-value pairs encoded as HTML Form URL encoded data and add them to 
            a collection as UNescaped URI strings.
            </summary>
            <param name="input">Stream to read from.</param>
            <param name="bufferSize">Size of the buffer used to read the contents.</param>
            <returns>Collection of name-value pairs.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.HttpContentExtensions">
            <summary>
            Extension methods to allow strongly typed objects to be read from <see cref="T:System.Net.Http.HttpContent"/> instances.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified <paramref name="type"/>
            from the <paramref name="content"/> instance.
            </summary>
            <remarks>This override use the built-in collection of formatters.</remarks>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="type">The type of the object to read.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified <paramref name="type"/>
            from the <paramref name="content"/> instance.
            </summary>
            <remarks>This override use the built-in collection of formatters.</remarks>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="type">The type of the object to read.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{FBoxClientDriver.NetHttp.MediaTypeFormatter})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified <paramref name="type"/>
            from the <paramref name="content"/> instance using one of the provided <paramref name="formatters"/>
            to deserialize the content.
            </summary>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="type">The type of the object to read.</param>
            <param name="formatters">The collection of <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instances to use.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{FBoxClientDriver.NetHttp.MediaTypeFormatter},System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified <paramref name="type"/>
            from the <paramref name="content"/> instance using one of the provided <paramref name="formatters"/>
            to deserialize the content.
            </summary>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="type">The type of the object to read.</param>
            <param name="formatters">The collection of <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instances to use.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{FBoxClientDriver.NetHttp.MediaTypeFormatter},FBoxClientDriver.NetHttp.IFormatterLogger)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified <paramref name="type"/>
            from the <paramref name="content"/> instance using one of the provided <paramref name="formatters"/>
            to deserialize the content.
            </summary>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="type">The type of the object to read.</param>
            <param name="formatters">The collection of <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instances to use.</param>
            <param name="formatterLogger">The <see cref="T:FBoxClientDriver.NetHttp.IFormatterLogger"/> to log events to.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{FBoxClientDriver.NetHttp.MediaTypeFormatter},FBoxClientDriver.NetHttp.IFormatterLogger,System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified <paramref name="type"/>
            from the <paramref name="content"/> instance using one of the provided <paramref name="formatters"/>
            to deserialize the content.
            </summary>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="type">The type of the object to read.</param>
            <param name="formatters">The collection of <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instances to use.</param>
            <param name="formatterLogger">The <see cref="T:FBoxClientDriver.NetHttp.IFormatterLogger"/> to log events to.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified
            type <typeparamref name="T"/> from the <paramref name="content"/> instance.
            </summary>
            <remarks>This override use the built-in collection of formatters.</remarks>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified
            type <typeparamref name="T"/> from the <paramref name="content"/> instance.
            </summary>
            <remarks>This override use the built-in collection of formatters.</remarks>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{FBoxClientDriver.NetHttp.MediaTypeFormatter})">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified
            type <typeparamref name="T"/> from the <paramref name="content"/> instance.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="formatters">The collection of <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instances to use.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{FBoxClientDriver.NetHttp.MediaTypeFormatter},System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified
            type <typeparamref name="T"/> from the <paramref name="content"/> instance.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="formatters">The collection of <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instances to use.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{FBoxClientDriver.NetHttp.MediaTypeFormatter},FBoxClientDriver.NetHttp.IFormatterLogger)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified
            type <typeparamref name="T"/> from the <paramref name="content"/> instance.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="formatters">The collection of <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instances to use.</param>
            <param name="formatterLogger">The <see cref="T:FBoxClientDriver.NetHttp.IFormatterLogger"/> to log events to.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{FBoxClientDriver.NetHttp.MediaTypeFormatter},FBoxClientDriver.NetHttp.IFormatterLogger,System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that will yield an object of the specified
            type <typeparamref name="T"/> from the <paramref name="content"/> instance.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> instance from which to read.</param>
            <param name="formatters">The collection of <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instances to use.</param>
            <param name="formatterLogger">The <see cref="T:FBoxClientDriver.NetHttp.IFormatterLogger"/> to log events to.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task object representing reading the content as an object of the specified type.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.HttpUnsortedHeaders">
            <summary>
            All of the existing non-abstract <see cref="T:System.Net.Http.Headers.HttpHeaders"/> implementations, namely
            <see cref="T:System.Net.Http.Headers.HttpRequestHeaders"/>, <see cref="T:System.Net.Http.Headers.HttpResponseHeaders"/>, and <see cref="T:System.Net.Http.Headers.HttpContentHeaders"/>
            enforce strict rules on what kinds of HTTP header fields can be added to each collection.
            When parsing the "application/http" media type we need to just get the unsorted list. It
            will get sorted later.
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.HttpUnsortedRequest">
            <summary>
            Represents the HTTP Request Line and header parameters parsed by <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpRequestLineParser"/>
            and <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpRequestHeaderParser"/>.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpUnsortedRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.HttpUnsortedRequest"/> class.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.HttpUnsortedRequest.Method">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>
            The HTTP method.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.HttpUnsortedRequest.RequestUri">
            <summary>
            Gets or sets the HTTP request URI portion that is carried in the RequestLine (i.e the URI path + query).
            </summary>
            <value>
            The request URI.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.HttpUnsortedRequest.Version">
            <summary>
            Gets or sets the HTTP version.
            </summary>
            <value>
            The HTTP version.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.HttpUnsortedRequest.HttpHeaders">
            <summary>
            Gets the unsorted HTTP request headers.
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.HttpUnsortedResponse">
            <summary>
            Represents the HTTP Status Line and header parameters parsed by <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpStatusLineParser"/>
            and <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpResponseHeaderParser"/>.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpUnsortedResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.HttpUnsortedRequest"/> class.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.HttpUnsortedResponse.Version">
            <summary>
            Gets or sets the HTTP version.
            </summary>
            <value>
            The HTTP version.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.HttpUnsortedResponse.StatusCode">
            <summary>
            Gets or sets the <see cref="T:System.Net.HttpStatusCode"/>
            </summary>
            <value>
            The HTTP status code
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.HttpUnsortedResponse.ReasonPhrase">
            <summary>
            Gets or sets the HTTP reason phrase
            </summary>
            <value>
            The response reason phrase
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.HttpUnsortedResponse.HttpHeaders">
            <summary>
            Gets the unsorted HTTP request headers.
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.HttpValueCollection">
            <summary>
             NameValueCollection to represent form data and to generate form data output.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpValueCollection.#ctor">
            <summary>
            Creates a new <see cref="T:FBoxClientDriver.NetHttp.HttpValueCollection"/> instance 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpValueCollection.Add(System.String,System.String)">
            <summary>
            Adds a name-value pair to the collection.
            </summary>
            <param name="name">The name to be added as a case insensitive string.</param>
            <param name="value">The value to be added.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpValueCollection.ToString">
            <summary>
            Converts the content of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance, multiple values with a single key are comma separated.</returns>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.HttpValueCollection.Item(System.String)">
            <summary>
            Gets the values associated with the specified name
            combined into one comma-separated list.
            </summary>
            <param name="name">The name of the entry that contains the values to get. The name can be null.</param>
            <returns>A <see cref="T:System.String"/> that contains a comma-separated list of url encoded values associated
            with the specified name if found; otherwise, null. The values are Url encoded.</returns>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.HttpValueCollection.Count">
            <summary>
            Gets the number of names in the collection.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpValueCollection.Get(System.String)">
            <summary>
            Gets the values associated with the specified name
            combined into one comma-separated list.
            </summary>
            <param name="name">The name of the entry that contains the values to get. The name can be null.</param>
            <returns>
            A <see cref="T:System.String"/> that contains a comma-separated list of url encoded values associated
            with the specified name if found; otherwise, null. The values are Url encoded.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpValueCollection.GetValues(System.String)">
            <summary>
            Gets the values associated with the specified name.
            </summary>
            <param name="name">The <see cref="T:System.String"/></param>
            <returns>A <see cref="T:System.String"/> that contains url encoded values associated with the name, or null if the name does not exist.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpValueCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:FBoxClientDriver.NetHttp.HttpValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:FBoxClientDriver.NetHttp.IFormatterLogger">
            <summary>
            Interface to log events that occur during formatter reads.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.IFormatterLogger.LogError(System.String,System.String)">
            <summary>
            Logs an error.
            </summary>
            <param name="errorPath">The path to the member for which the error is being logged.</param>
            <param name="errorMessage">The error message to be logged.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.IFormatterLogger.LogError(System.String,System.Exception)">
            <summary>
            Logs an error.
            </summary>
            <param name="errorPath">The path to the member for which the error is being logged.</param>
            <param name="exception">The exception to be logged.</param>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.JsonMediaTypeFormatter">
            <summary>
            <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> class to handle Json.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.JsonMediaTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.JsonMediaTypeFormatter"/> class.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.JsonMediaTypeFormatter.#ctor(FBoxClientDriver.NetHttp.JsonMediaTypeFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.JsonMediaTypeFormatter"/> class.
            </summary>
            <param name="formatter">The <see cref="T:FBoxClientDriver.NetHttp.JsonMediaTypeFormatter"/> instance to copy settings from.</param>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.JsonMediaTypeFormatter.DefaultMediaType">
            <summary>
            Gets the default media type for Json, namely "application/json".
            </summary>
            <remarks>
            The default media type does not have any <c>charset</c> parameter as
            the <see cref="T:System.Text.Encoding"/> can be configured on a per <see cref="T:FBoxClientDriver.NetHttp.JsonMediaTypeFormatter"/>
            instance basis.
            </remarks>
            <value>
            Because <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> is mutable, the value
            returned will be a new instance every time.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.JsonMediaTypeFormatter.Indent">
            <summary>
            Gets or sets a value indicating whether to indent elements when writing data. 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.JsonMediaTypeFormatter.CreateJsonReader(System.Type,System.IO.Stream,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:FBoxClientDriver.NetHttp.JsonMediaTypeFormatter.CreateJsonWriter(System.Type,System.IO.Stream,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:FBoxClientDriver.NetHttp.ListWrapperCollection`1">
            <summary>
            A class that inherits from Collection of T but also exposes its underlying data as List of T for performance.
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.MediaTypeConstants">
            <summary>
            Constants related to media types.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeConstants.ApplicationOctetStreamMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/octet-stream</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/octet-stream</c>.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeConstants.ApplicationXmlMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/xml</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/xml</c>.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeConstants.ApplicationJsonMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/json</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/json</c>.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeConstants.TextXmlMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>text/xml</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>text/xml</c>.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeConstants.TextJsonMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>text/json</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>text/json</c>.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeConstants.ApplicationFormUrlEncodedMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/x-www-form-urlencoded</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/x-www-form-urlencoded</c>.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeConstants.ApplicationBsonMediaType">
            <summary>
            Gets a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/bson</c>.
            </summary>
            <value>
            A new <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instance representing <c>application/bson</c>.
            </value>
            <remarks>
            Not yet a standard. In particular this media type is not currently listed at
            http://www.iana.org/assignments/media-types/application.
            </remarks>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.MediaTypeFormatter">
            <summary>
            Base class to handle serializing and deserializing strongly-typed objects using <see cref="T:FBoxClientDriver.NetHttp.ObjectContent"/>.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> class.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.#ctor(FBoxClientDriver.NetHttp.MediaTypeFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> class.
            </summary>
            <param name="formatter">The <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instance to copy settings from.</param>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeFormatter.MaxHttpCollectionKeys">
            <summary>
            Gets or sets the maximum number of keys stored in a NameValueCollection. 
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeFormatter.SupportedMediaTypes">
            <summary>
            Gets the mutable collection of <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> elements supported by
            this <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instance.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeFormatter.SupportedEncodings">
            <summary>
            Gets the mutable collection of character encodings supported by
            this <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instance. The encodings are
            used when reading or writing data. 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,FBoxClientDriver.NetHttp.IFormatterLogger)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> to deserialize an object of the given <paramref name="type"/> from the given <paramref name="readStream"/>
            </summary>
            <remarks>
            <para>This implementation throws a <see cref="T:System.NotSupportedException"/>. Derived types should override this method if the formatter
            supports reading.</para>
            <para>An implementation of this method should NOT close <paramref name="readStream"/> upon completion. The stream will be closed independently when
            the <see cref="T:System.Net.Http.HttpContent"/> instance is disposed.
            </para>
            </remarks>
            <param name="type">The type of the object to deserialize.</param>
            <param name="readStream">The <see cref="T:System.IO.Stream"/> to read.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> if available. It may be <c>null</c>.</param>
            <param name="formatterLogger">The <see cref="T:FBoxClientDriver.NetHttp.IFormatterLogger"/> to log events to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> whose result will be an object of the given type.</returns>
            <exception cref="T:System.NotSupportedException">Derived types need to support reading.</exception>
            <seealso cref="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.CanReadType(System.Type)"/>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,FBoxClientDriver.NetHttp.IFormatterLogger,System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> to deserialize an object of the given <paramref name="type"/> from the given <paramref name="readStream"/>
            </summary>
            <remarks>
            <para>This implementation throws a <see cref="T:System.NotSupportedException"/>. Derived types should override this method if the formatter
            supports reading.</para>
            <para>An implementation of this method should NOT close <paramref name="readStream"/> upon completion. The stream will be closed independently when
            the <see cref="T:System.Net.Http.HttpContent"/> instance is disposed.
            </para>
            </remarks>
            <param name="type">The type of the object to deserialize.</param>
            <param name="readStream">The <see cref="T:System.IO.Stream"/> to read.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> if available. It may be <c>null</c>.</param>
            <param name="formatterLogger">The <see cref="T:FBoxClientDriver.NetHttp.IFormatterLogger"/> to log events to.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> whose result will be an object of the given type.</returns>
            <exception cref="T:System.NotSupportedException">Derived types need to support reading.</exception>
            <seealso cref="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.CanReadType(System.Type)"/>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that serializes the given <paramref name="value"/> of the given <paramref name="type"/>
            to the given <paramref name="writeStream"/>.
            </summary>
            <remarks>
            <para>This implementation throws a <see cref="T:System.NotSupportedException"/>. Derived types should override this method if the formatter
            supports reading.</para>
            <para>An implementation of this method should NOT close <paramref name="writeStream"/> upon completion. The stream will be closed independently when
            the <see cref="T:System.Net.Http.HttpContent"/> instance is disposed.
            </para>
            </remarks>
            <param name="type">The type of the object to write.</param>
            <param name="value">The object value to write.  It may be <c>null</c>.</param>
            <param name="writeStream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> if available. It may be <c>null</c>.</param>
            <param name="transportContext">The <see cref="T:System.Net.TransportContext"/> if available. It may be <c>null</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will perform the write.</returns>
            <exception cref="T:System.NotSupportedException">Derived types need to support writing.</exception>
            <seealso cref="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.CanWriteType(System.Type)"/>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that serializes the given <paramref name="value"/> of the given <paramref name="type"/>
            to the given <paramref name="writeStream"/>.
            </summary>
            <remarks>
            <para>This implementation throws a <see cref="T:System.NotSupportedException"/>. Derived types should override this method if the formatter
            supports reading.</para>
            <para>An implementation of this method should NOT close <paramref name="writeStream"/> upon completion. The stream will be closed independently when
            the <see cref="T:System.Net.Http.HttpContent"/> instance is disposed.
            </para>
            </remarks>
            <param name="type">The type of the object to write.</param>
            <param name="value">The object value to write.  It may be <c>null</c>.</param>
            <param name="writeStream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="content">The <see cref="T:System.Net.Http.HttpContent"/> if available. It may be <c>null</c>.</param>
            <param name="transportContext">The <see cref="T:System.Net.TransportContext"/> if available. It may be <c>null</c>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will perform the write.</returns>
            <exception cref="T:System.NotSupportedException">Derived types need to support writing.</exception>
            <seealso cref="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.CanWriteType(System.Type)"/>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.TryGetDelegatingTypeForIEnumerableGenericOrSame(System.Type@)">
            <summary>
            This method converts <see cref="T:System.Collections.Generic.IEnumerable`1"/> (and interfaces that mandate it) to a <see cref="T:FBoxClientDriver.NetHttp.DelegatingEnumerable`1"/> for serialization purposes.
            </summary>
            <param name="type">The type to potentially be wrapped. If the type is wrapped, it's changed in place.</param>
            <returns>Returns <c>true</c> if the type was wrapped; <c>false</c>, otherwise</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.TryGetDelegatingTypeForIQueryableGenericOrSame(System.Type@)">
            <summary>
            This method converts <see cref="T:System.Linq.IQueryable`1"/> (and interfaces that mandate it) to a <see cref="T:FBoxClientDriver.NetHttp.DelegatingEnumerable`1"/> for serialization purposes.
            </summary>
            <param name="type">The type to potentially be wrapped. If the type is wrapped, it's changed in place.</param>
            <returns>Returns <c>true</c> if the type was wrapped; <c>false</c>, otherwise</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
            Determines the best <see cref="T:System.Text.Encoding"/> amongst the supported encodings
            for reading or writing an HTTP entity body based on the provided <paramref name="contentHeaders"/>.
            </summary>
            <param name="contentHeaders">The content headers provided as part of the request or response.</param>
            <returns>The <see cref="T:System.Text.Encoding"/> to use when reading the request or writing the response.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the default headers for content that will be formatted using this formatter. This method
            is called from the <see cref="T:FBoxClientDriver.NetHttp.ObjectContent"/> constructor.
            This implementation sets the Content-Type header to the value of <paramref name="mediaType"/> if it is
            not <c>null</c>. If it is <c>null</c> it sets the Content-Type to the default media type of this formatter.
            If the Content-Type does not specify a charset it will set it using this formatters configured
            <see cref="T:System.Text.Encoding"/>.
            </summary>
            <remarks>
            Subclasses can override this method to set content headers such as Content-Type etc. Subclasses should
            call the base implementation. Subclasses should treat the passed in <paramref name="mediaType"/> (if not <c>null</c>)
            as the authoritative media type and use that as the Content-Type.
            </remarks>
            <param name="type">The type of the object being serialized. See <see cref="T:FBoxClientDriver.NetHttp.ObjectContent"/>.</param>
            <param name="headers">The content headers that should be configured.</param>
            <param name="mediaType">The authoritative media type. Can be <c>null</c>.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Returns a specialized instance of the <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> that can handle formatting a response for the given
            parameters. This method is called after a formatter has been selected through content negotiation.
            </summary>
            <remarks>
            The default implementation returns <c>this</c> instance. Derived classes can choose to return a new instance if
            they need to close over any of the parameters.
            </remarks>
            <param name="type">The type being serialized.</param>
            <param name="request">The request.</param>
            <param name="mediaType">The media type chosen for the serialization. Can be <c>null</c>.</param>
            <returns>An instance that can format a response to the given <paramref name="request"/>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.CanReadType(System.Type)">
            <summary>
            Determines whether this <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> can deserialize
            an object of the specified type.
            </summary>
            <remarks>
            Derived classes must implement this method and indicate if a type can or cannot be deserialized.
            </remarks>
            <param name="type">The type of object that will be deserialized.</param>
            <returns><c>true</c> if this <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> can deserialize an object of that type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.CanWriteType(System.Type)">
            <summary>
            Determines whether this <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> can serialize
            an object of the specified type.
            </summary>
            <remarks>
            Derived classes must implement this method and indicate if a type can or cannot be serialized.
            </remarks>
            <param name="type">The type of object that will be serialized.</param>
            <returns><c>true</c> if this <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> can serialize an object of that type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.GetDefaultValueForType(System.Type)">
            <summary>
            Gets the default value for the specified type.
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.MediaTypeFormatter.MediaTypeHeaderValueCollection">
            <summary>
            Collection class that validates it contains only <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instances
            that are not null and not media ranges.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.MediaTypeHeaderValueCollection.InsertItem(System.Int32,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Inserts the <paramref name="item"/> into the collection at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. It cannot be <c>null</c>.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatter.MediaTypeHeaderValueCollection.SetItem(System.Int32,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Replaces the element at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the item that should be replaced.</param>
            <param name="item">The new value for the element at the specified index.  It cannot be <c>null</c>.</param>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection">
            <summary>
            Collection class that contains <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instances.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection"/> class.
            </summary>
            <remarks>
            This collection will be initialized to contain default <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/>
            instances for Xml, JsonValue and Json.
            </remarks>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection.#ctor(System.Collections.Generic.IEnumerable{FBoxClientDriver.NetHttp.MediaTypeFormatter})">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection"/> class.
            </summary>
            <param name="formatters">A collection of <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instances to place in the collection.</param>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection.JsonFormatter">
            <summary>
            Gets the <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> to use for Json.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection.FormUrlEncodedFormatter">
            <summary>
            Gets the <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> to use for <c>application/x-www-form-urlencoded</c> data.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection.AddRange(System.Collections.Generic.IEnumerable{FBoxClientDriver.NetHttp.MediaTypeFormatter})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection"/>.
            </summary>
            <param name="items">
            The items that should be added to the end of the <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection"/>.
            The items collection itself cannot be <see langword="null"/>, but it can contain elements that are
            <see langword="null"/>.
            </param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{FBoxClientDriver.NetHttp.MediaTypeFormatter})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection"/> at the specified
            index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="items">
            The items that should be inserted into the <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection"/>. The items collection
            itself cannot be <see langword="null"/>, but it can contain elements that are <see langword="null"/>.
            </param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection.FindReader(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Helper to search a collection for a formatter that can read the .NET type in the given mediaType.
            </summary>
            <param name="type">.NET type to read</param>
            <param name="mediaType">media type to match on.</param>
            <returns>Formatter that can read the type. Null if no formatter found.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection.FindWriter(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Helper to search a collection for a formatter that can write the .NET type in the given mediaType.
            </summary>
            <param name="type">.NET type to read</param>
            <param name="mediaType">media type to match on.</param>
            <returns>Formatter that can write the type. Null if no formatter found.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection.IsTypeExcludedFromValidation(System.Type)">
            <summary>
            Returns true if the type is one of those loosely defined types that should be excluded from validation
            </summary>
            <param name="type">.NET <see cref="T:System.Type"/> to validate</param>
            <returns><c>true</c> if the type should be excluded.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeFormatterCollection.CreateDefaultFormatters">
            <summary>
            Creates a collection of new instances of the default <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/>s.
            </summary>
            <returns>The collection of default <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> instances.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.MediaTypeHeaderValueExtensions">
            <summary>
            Extension methods for <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeHeaderValueExtensions.IsSubsetOf(System.Net.Http.Headers.MediaTypeHeaderValue,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Determines whether two <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instances match. The instance
            <paramref name="mediaType1"/> is said to match <paramref name="mediaType2"/> if and only if
            <paramref name="mediaType1"/> is a strict subset of the values and parameters of <paramref name="mediaType2"/>. 
            That is, if the media type and media type parameters of <paramref name="mediaType1"/> are all present 
            and match those of <paramref name="mediaType2"/> then it is a match even though <paramref name="mediaType2"/> may have additional
            parameters.
            </summary>
            <param name="mediaType1">The first media type.</param>
            <param name="mediaType2">The second media type.</param>
            <returns><c>true</c> if this is a subset of <paramref name="mediaType2"/>; false otherwise.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.MediaTypeHeaderValueExtensions.IsSubsetOf(System.Net.Http.Headers.MediaTypeHeaderValue,System.Net.Http.Headers.MediaTypeHeaderValue,FBoxClientDriver.NetHttp.MediaTypeHeaderValueRange@)">
            <summary>
            Determines whether two <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> instances match. The instance
            <paramref name="mediaType1"/> is said to match <paramref name="mediaType2"/> if and only if
            <paramref name="mediaType1"/> is a strict subset of the values and parameters of <paramref name="mediaType2"/>. 
            That is, if the media type and media type parameters of <paramref name="mediaType1"/> are all present 
            and match those of <paramref name="mediaType2"/> then it is a match even though <paramref name="mediaType2"/> may have additional
            parameters.
            </summary>
            <param name="mediaType1">The first media type.</param>
            <param name="mediaType2">The second media type.</param>
            <param name="mediaType2Range">Indicates whether <paramref name="mediaType2"/> is a regular media type, a subtype media range, or a full media range</param>
            <returns><c>true</c> if this is a subset of <paramref name="mediaType2"/>; false otherwise.</returns>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.MediaTypeHeaderValueRange.None">
            <summary>
            Not a media type range
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.MediaTypeHeaderValueRange.SubtypeMediaRange">
            <summary>
            A subtype media range, e.g. "application/*".
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.MediaTypeHeaderValueRange.AllMediaRange">
            <summary>
            An all media range, e.g. "*/*".
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.ObjectContent">
            <summary>
            Contains a value as well as an associated <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter"/> that will be
            used to serialize the value when writing this content.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.ObjectContent.#ctor(System.Type,System.Object,FBoxClientDriver.NetHttp.MediaTypeFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.ObjectContent"/> class.
            </summary>
            <param name="type">The type of object this instance will contain.</param>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="formatter">The formatter to use when serializing the value.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.ObjectContent.#ctor(System.Type,System.Object,FBoxClientDriver.NetHttp.MediaTypeFormatter,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.ObjectContent"/> class.
            </summary>
            <param name="type">The type of object this instance will contain.</param>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="formatter">The formatter to use when serializing the value.</param>
            <param name="mediaType">The authoritative value of the content's Content-Type header. Can be <c>null</c> in which case the
            <paramref name="formatter">formatter's</paramref> default content type will be used.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.ObjectContent.#ctor(System.Type,System.Object,FBoxClientDriver.NetHttp.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.ObjectContent"/> class.
            </summary>
            <param name="type">The type of object this instance will contain.</param>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="formatter">The formatter to use when serializing the value.</param>
            <param name="mediaType">The authoritative value of the content's Content-Type header. Can be <c>null</c> in which case the
            <paramref name="formatter">formatter's</paramref> default content type will be used.</param>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.ObjectContent.ObjectType">
            <summary>
            Gets the type of object managed by this <see cref="T:FBoxClientDriver.NetHttp.ObjectContent"/> instance.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.ObjectContent.Formatter">
            <summary>
            The <see cref="T:FBoxClientDriver.NetHttp.MediaTypeFormatter">formatter</see> associated with this content instance.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.ObjectContent.Value">
            <summary>
            Gets or sets the value of the current <see cref="T:FBoxClientDriver.NetHttp.ObjectContent"/>.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.ObjectContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            Asynchronously serializes the object's content to the given <paramref name="stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="context">The associated <see cref="T:System.Net.TransportContext"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that is asynchronously serializing the object's content.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.ObjectContent.TryComputeLength(System.Int64@)">
            <summary>
            Computes the length of the stream if possible.
            </summary>
            <param name="length">The computed length of the stream.</param>
            <returns><c>true</c> if the length has been computed; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.ObjectContent`1">
            <summary>
            Generic form of <see cref="T:FBoxClientDriver.NetHttp.ObjectContent"/>.
            </summary>
            <typeparam name="T">The type of object this <see cref="T:FBoxClientDriver.NetHttp.ObjectContent"/> class will contain.</typeparam>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.ObjectContent`1.#ctor(`0,FBoxClientDriver.NetHttp.MediaTypeFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.ObjectContent`1"/> class.
            </summary>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="formatter">The formatter to use when serializing the value.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.ObjectContent`1.#ctor(`0,FBoxClientDriver.NetHttp.MediaTypeFormatter,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.ObjectContent`1"/> class.
            </summary>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="formatter">The formatter to use when serializing the value.</param>
            <param name="mediaType">The authoritative value of the content's Content-Type header. Can be <c>null</c> in which case the
            <paramref name="formatter">formatter's</paramref> default content type will be used.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.ObjectContent`1.#ctor(`0,FBoxClientDriver.NetHttp.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.ObjectContent`1"/> class.
            </summary>
            <param name="value">The value of the object this instance will contain.</param>
            <param name="formatter">The formatter to use when serializing the value.</param>
            <param name="mediaType">The authoritative value of the content's Content-Type header. Can be <c>null</c> in which case the
            <paramref name="formatter">formatter's</paramref> default content type will be used.</param>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.FormUrlEncodedParser">
            <summary>
            Buffer-oriented parsing of HTML form URL-ended, also known as <c>application/x-www-form-urlencoded</c>, data. 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.FormUrlEncodedParser.#ctor(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.FormUrlEncodedParser"/> class.
            </summary>
            <param name="nameValuePairs">The collection to which name value pairs are added as they are parsed.</param>
            <param name="maxMessageSize">Maximum length of all the individual name value pairs.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.FormUrlEncodedParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Parse a buffer of URL form-encoded name-value pairs and add them to the collection.
            Bytes are parsed in a consuming manner from the beginning of the buffer meaning that the same bytes can not be 
            present in the buffer.
            </summary>
            <param name="buffer">Buffer from where data is read</param>
            <param name="bytesReady">Size of buffer</param>
            <param name="bytesConsumed">Offset into buffer</param>
            <param name="isFinal">Indicates whether the end of the URL form-encoded data has been reached.</param>
            <returns>State of the parser. Call this method with new data until it reaches a final state.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.FormUrlEncodedParser.CurrentNameValuePair">
            <summary>
            Maintains information about the current header field being parsed. 
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.Parsers.FormUrlEncodedParser.CurrentNameValuePair.Name">
            <summary>
            Gets the name of the name value pair.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.Parsers.FormUrlEncodedParser.CurrentNameValuePair.Value">
            <summary>
            Gets the value of the name value pair
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.FormUrlEncodedParser.CurrentNameValuePair.CopyTo(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Copies current name value pair field to the provided collection instance.
            </summary>
            <param name="nameValuePairs">The collection to copy into.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.FormUrlEncodedParser.CurrentNameValuePair.CopyNameOnlyTo(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Copies current name-only to the provided collection instance.
            </summary>
            <param name="nameValuePairs">The collection to copy into.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.FormUrlEncodedParser.CurrentNameValuePair.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.HttpRequestHeaderParser">
            <summary>
            The <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpRequestHeaderParser"/> combines <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpRequestLineParser"/> for parsing the HTTP Request Line  
            and <see cref="T:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser"/> for parsing each header field. 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.HttpRequestHeaderParser.#ctor(FBoxClientDriver.NetHttp.HttpUnsortedRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpRequestHeaderParser"/> class.
            </summary>
            <param name="httpRequest">The parsed HTTP request without any header sorting.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.HttpRequestHeaderParser.#ctor(FBoxClientDriver.NetHttp.HttpUnsortedRequest,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpRequestHeaderParser"/> class.
            </summary>
            <param name="httpRequest">The parsed HTTP request without any header sorting.</param>
            <param name="maxRequestLineSize">The max length of the HTTP request line.</param>
            <param name="maxHeaderSize">The max length of the HTTP header.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.HttpRequestHeaderParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parse an HTTP request header and fill in the <see cref="T:System.Net.Http.HttpRequestMessage"/> instance.
            </summary>
            <param name="buffer">Request buffer from where request is read</param>
            <param name="bytesReady">Size of request buffer</param>
            <param name="bytesConsumed">Offset into request buffer</param>
            <returns>State of the parser.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.HttpRequestLineParser">
            <summary>
            HTTP Request Line parser for parsing the first line (the request line) in an HTTP request.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.HttpRequestLineParser.#ctor(FBoxClientDriver.NetHttp.HttpUnsortedRequest,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpRequestLineParser"/> class.
            </summary>
            <param name="httpRequest"><see cref="T:FBoxClientDriver.NetHttp.HttpUnsortedRequest"/> instance where the request line properties will be set as they are parsed.</param>
            <param name="maxRequestLineSize">Maximum length of HTTP header.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.HttpRequestLineParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parse an HTTP request line. 
            Bytes are parsed in a consuming manner from the beginning of the request buffer meaning that the same bytes can not be 
            present in the request buffer.
            </summary>
            <param name="buffer">Request buffer from where request is read</param>
            <param name="bytesReady">Size of request buffer</param>
            <param name="bytesConsumed">Offset into request buffer</param>
            <returns>State of the parser.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.HttpResponseHeaderParser">
            <summary>
            The <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpResponseHeaderParser"/> combines <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpStatusLineParser"/> for parsing the HTTP Status Line  
            and <see cref="T:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser"/> for parsing each header field. 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.HttpResponseHeaderParser.#ctor(FBoxClientDriver.NetHttp.HttpUnsortedResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpResponseHeaderParser"/> class.
            </summary>
            <param name="httpResponse">The parsed HTTP response without any header sorting.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.HttpResponseHeaderParser.#ctor(FBoxClientDriver.NetHttp.HttpUnsortedResponse,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpResponseHeaderParser"/> class.
            </summary>
            <param name="httpResponse">The parsed HTTP response without any header sorting.</param>
            <param name="maxResponseLineSize">The max length of the HTTP status line.</param>
            <param name="maxHeaderSize">The max length of the HTTP header.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.HttpResponseHeaderParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parse an HTTP response header and fill in the <see cref="T:System.Net.Http.HttpResponseMessage"/> instance.
            </summary>
            <param name="buffer">Response buffer from where response is read</param>
            <param name="bytesReady">Size of response buffer</param>
            <param name="bytesConsumed">Offset into response buffer</param>
            <returns>State of the parser.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.HttpStatusLineParser">
            <summary>
            HTTP Status line parser for parsing the first line (the status line) in an HTTP response.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.HttpStatusLineParser.#ctor(FBoxClientDriver.NetHttp.HttpUnsortedResponse,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.HttpStatusLineParser"/> class.
            </summary>
            <param name="httpResponse"><see cref="T:FBoxClientDriver.NetHttp.HttpUnsortedResponse"/> instance where the response line properties will be set as they are parsed.</param>
            <param name="maxStatusLineSize">Maximum length of HTTP header.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.HttpStatusLineParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parse an HTTP status line. 
            Bytes are parsed in a consuming manner from the beginning of the response buffer meaning that the same bytes can not be 
            present in the response buffer.
            </summary>
            <param name="buffer">Response buffer from where response is read</param>
            <param name="bytesReady">Size of response buffer</param>
            <param name="bytesConsumed">Offset into response buffer</param>
            <returns>State of the parser.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser">
            <summary>
            Buffer-oriented RFC 5322 style Internet Message Format parser which can be used to pass header 
            fields used in HTTP and MIME message entities. 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser.#ctor(System.Net.Http.Headers.HttpHeaders,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser"/> class.
            </summary>
            <param name="headers">Concrete <see cref="T:System.Net.Http.Headers.HttpHeaders"/> instance where header fields are added as they are parsed.</param>
            <param name="maxHeaderSize">Maximum length of complete header containing all the individual header fields.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser.#ctor(System.Net.Http.Headers.HttpHeaders,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser"/> class.
            </summary>
            <param name="headers">
            Concrete <see cref="T:System.Net.Http.Headers.HttpHeaders"/> instance where header fields are added as they are parsed.
            </param>
            <param name="maxHeaderSize">
            Maximum length of complete header containing all the individual header fields.
            </param>
            <param name="ignoreHeaderValidation">
            Will validate content and names of headers if set to <c>false</c>.
            </param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parse a buffer of RFC 5322 style header fields and add them to the <see cref="T:System.Net.Http.Headers.HttpHeaders"/> collection.
            Bytes are parsed in a consuming manner from the beginning of the buffer meaning that the same bytes can not be 
            present in the buffer.
            </summary>
            <param name="buffer">Request buffer from where request is read</param>
            <param name="bytesReady">Size of request buffer</param>
            <param name="bytesConsumed">Offset into request buffer</param>
            <returns>State of the parser. Call this method with new data until it reaches a final state.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore">
            <summary>
            Maintains information about the current header field being parsed. 
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore.Name">
            <summary>
            Gets the header field name.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore.Value">
            <summary>
            Gets the header field value.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore.CopyTo(System.Net.Http.Headers.HttpHeaders,System.Boolean)">
            <summary>
            Copies current header field to the provided <see cref="T:System.Net.Http.Headers.HttpHeaders"/> instance.
            </summary>
            <param name="headers">The headers.</param>
            <param name="ignoreHeaderValidation">Set to false to validate headers</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.InternetMessageFormatHeaderParser.CurrentHeaderFieldStore.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser">
            <summary>
            Buffer-oriented MIME multipart parser.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser"/> class.
            </summary>
            <param name="boundary">Message boundary</param>
            <param name="maxMessageSize">Maximum length of entire MIME multipart message.</param>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.State">
            <summary>
            Represents the overall state of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser"/>.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.State.NeedMoreData">
            <summary>
            Need more data
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.State.BodyPartCompleted">
            <summary>
            Parsing of a complete body part succeeded.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.State.Invalid">
            <summary>
            Bad data format
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.State.DataTooBig">
            <summary>
            Data exceeds the allowed size
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.ParseBuffer(System.Byte[],System.Int32,System.Int32@,System.ArraySegment{System.Byte}@,System.ArraySegment{System.Byte}@,System.Boolean@)">
            <summary>
            Parse a MIME multipart message. Bytes are parsed in a consuming
            manner from the beginning of the request buffer meaning that the same bytes can not be 
            present in the request buffer.
            </summary>
            <param name="buffer">Request buffer from where request is read</param>
            <param name="bytesReady">Size of request buffer</param>
            <param name="bytesConsumed">Offset into request buffer</param>
            <param name="remainingBodyPart">Any body part that was considered as a potential MIME multipart boundary but which was in fact part of the body.</param>
            <param name="bodyPart">The bulk of the body part.</param>
            <param name="isFinalBodyPart">Indicates whether the final body part has been found.</param>
            <remarks>In order to get the complete body part, the caller is responsible for concatenating the contents of the 
            <paramref name="remainingBodyPart"/> and <paramref name="bodyPart"/> out parameters.</remarks>
            <returns>State of the parser.</returns>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore">
            <summary>
            Maintains information about the current body part being parsed.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore"/> class.
            </summary>
            <param name="referenceBoundary">The reference boundary.</param>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.HasPotentialBoundaryLeftOver">
            <summary>
            Gets or sets a value indicating whether this instance has potential boundary left over.
            </summary>
            <value>
            <c>true</c> if this instance has potential boundary left over; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.BoundaryDelta">
            <summary>
            Gets the boundary delta.
            </summary>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.BodyPart">
            <summary>
            Gets or sets the body part.
            </summary>
            <value>
            The body part.
            </value>
        </member>
        <member name="P:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.IsFinal">
            <summary>
            Gets a value indicating whether this body part instance is final.
            </summary>
            <value>
              <c>true</c> if this body part instance is final; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.ResetBoundaryOffset">
            <summary>
            Resets the boundary offset.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.ResetBoundary">
            <summary>
            Resets the boundary.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.AppendBoundary(System.Byte)">
            <summary>
            Appends byte to the current boundary.
            </summary>
            <param name="data">The data to append to the boundary.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.AppendBoundary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends array of bytes to the current boundary.
            </summary>
            <param name="data">The data to append to the boundary.</param>
            <param name="offset">The offset into the data.</param>
            <param name="count">The number of bytes to append.</param>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.GetDiscardedBoundary">
            <summary>
            Gets the discarded boundary.
            </summary>
            <returns>An <see cref="T:System.ArraySegment`1"/> containing the discarded boundary.</returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.IsBoundaryValid">
            <summary>
            Determines whether current boundary is valid.
            </summary>
            <returns>
              <c>true</c> if curent boundary is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.ClearBodyPart">
            <summary>
            Clears the body part.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.Parsers.MimeMultipartParser.CurrentBodyPartStore.ClearAll">
            <summary>
            Clears all.
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.Parsers.ParserState">
            <summary>
            Represents the overall state of various parsers.
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.Parsers.ParserState.NeedMoreData">
            <summary>
            Need more data
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.Parsers.ParserState.Done">
            <summary>
            Parsing completed (final)
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.Parsers.ParserState.Invalid">
            <summary>
            Bad data format (final)
            </summary>
        </member>
        <member name="F:FBoxClientDriver.NetHttp.Parsers.ParserState.DataTooBig">
            <summary>
            Data exceeds the allowed size (final)
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.TaskHelpers">
            <summary>
            Helpers for safely using Task libraries. 
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.TaskHelpers.Canceled">
            <summary>
            Returns a canceled Task. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.TaskHelpers.Canceled``1">
            <summary>
            Returns a canceled Task of the given type. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.TaskHelpers.Completed">
            <summary>
            Returns a completed task that has no result. 
            </summary>        
        </member>
        <member name="M:FBoxClientDriver.NetHttp.TaskHelpers.FromError(System.Exception)">
            <summary>
            Returns an error task. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.TaskHelpers.FromError``1(System.Exception)">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.TaskHelpers.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.TaskHelpers.CancelCache`1">
            <summary>
            This class is a convenient cache for per-type cancelled tasks
            </summary>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.UnsupportedMediaTypeException">
            <summary>
            Defines an exception type for signalling that a request's media type was not supported.
            </summary>
        </member>
        <member name="M:FBoxClientDriver.NetHttp.UnsupportedMediaTypeException.#ctor(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:FBoxClientDriver.NetHttp.UnsupportedMediaTypeException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="mediaType">The unsupported media type.</param>
        </member>
        <member name="T:FBoxClientDriver.NetHttp.UriQueryUtility">
            <summary>
            Helpers for encoding, decoding, and parsing URI query components. In .Net 4.5
            please use the WebUtility class.
            </summary>
        </member>
        <member name="T:FBoxClientDriver.AlarmConfirmValueSignalArgs">
            <summary>
                报警确认消息推送
            </summary>
        </member>
        <member name="M:FBoxClientDriver.AlarmConfirmValueSignalArgs.#ctor(System.Int32,System.Collections.Generic.List{FBoxClientDriver.BoxAlarmConfirmEntity})">
            <summary>
                构造函数
            </summary>
            <param name="boxSessionId"></param>
            <param name="alarmList"></param>
        </member>
        <member name="P:FBoxClientDriver.AlarmConfirmValueSignalArgs.BoxSessionId">
            <summary>
                盒子会话Id
            </summary>
        </member>
        <member name="P:FBoxClientDriver.AlarmConfirmValueSignalArgs.AlarmList">
            <summary>
                报警确认列表
            </summary>
        </member>
        <member name="T:FBoxClientDriver.SignalREventArgs.BoxLocationArgs">
            <summary>
            SignalR推送的地址位置
            </summary>
        </member>
        <member name="M:FBoxClientDriver.SignalREventArgs.BoxLocationArgs.#ctor(System.Int64,System.String,System.Double,System.Double,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="boxId"></param>
            <param name="boxNo"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="radius"></param>
            <param name="address"></param>
        </member>
        <member name="P:FBoxClientDriver.SignalRArgs.SignalRUrl">
            <summary>
                地址
            </summary>
        </member>
        <member name="P:FBoxClientDriver.SignalRArgs.SignalRId">
            <summary>
                Url
            </summary>
        </member>
        <member name="P:FBoxClientDriver.SignalRArgs.OldState">
            <summary>
                老状态
            </summary>
        </member>
        <member name="P:FBoxClientDriver.SignalRArgs.NewState">
            <summary>
                新状态
            </summary>
        </member>
        <member name="T:System.Web.Http.Properties.CommonWebApiResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentInvalidAbsoluteUri">
            <summary>
              Looks up a localized string similar to Relative URI values are not supported: &apos;{0}&apos;. The URI must be absolute..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentInvalidHttpUriScheme">
            <summary>
              Looks up a localized string similar to Unsupported URI scheme: &apos;{0}&apos;. The URI scheme must be either &apos;{1}&apos; or &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentMustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be greater than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentMustBeLessThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be less than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; is null or empty..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentUriHasQueryOrFragment">
            <summary>
              Looks up a localized string similar to URI must not contain a query component or a fragment identifier..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="T:System.Net.Http.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.AsyncResult_CallbackThrewException">
            <summary>
              Looks up a localized string similar to Async Callback threw an exception..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.AsyncResult_MultipleCompletes">
            <summary>
              Looks up a localized string similar to The IAsyncResult implementation &apos;{0}&apos; tried to complete a single operation multiple times. This could be caused by an incorrect application IAsyncResult implementation or other extensibility code, such as an IAsyncResult that returns incorrect CompletedSynchronously values or invokes the AsyncCallback multiple times..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.AsyncResult_MultipleEnds">
            <summary>
              Looks up a localized string similar to End cannot be called twice on an AsyncResult..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.AsyncResult_ResultMismatch">
            <summary>
              Looks up a localized string similar to An incorrect IAsyncResult was provided to an &apos;End&apos; method. The IAsyncResult object passed to &apos;End&apos; must be the one returned from the matching &apos;Begin&apos; or passed to the callback provided to &apos;Begin&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ByteRangeStreamContentNoRanges">
            <summary>
              Looks up a localized string similar to Found zero byte ranges. There must be at least one byte range provided..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ByteRangeStreamContentNotBytesRange">
            <summary>
              Looks up a localized string similar to The range unit &apos;{0}&apos; is not valid. The range must have a unit of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ByteRangeStreamEmpty">
            <summary>
              Looks up a localized string similar to The stream over which &apos;{0}&apos; provides a range view must have a length greater than or equal to 1..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ByteRangeStreamInvalidFrom">
            <summary>
              Looks up a localized string similar to The &apos;From&apos; value of the range must be less than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ByteRangeStreamNoneOverlap">
            <summary>
              Looks up a localized string similar to None of the requested ranges ({0}) overlap with the current extent of the selected resource..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ByteRangeStreamNoOverlap">
            <summary>
              Looks up a localized string similar to The requested range ({0}) does not overlap with the current extent of the selected resource..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ByteRangeStreamNotSeekable">
            <summary>
              Looks up a localized string similar to The stream over which &apos;{0}&apos; provides a range view must be seekable..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ByteRangeStreamReadOnly">
            <summary>
              Looks up a localized string similar to This is a read-only stream..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.CannotHaveNullInList">
            <summary>
              Looks up a localized string similar to A null &apos;{0}&apos; is not valid..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.CannotUseMediaRangeForSupportedMediaType">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; of &apos;{1}&apos; cannot be used as a supported media type because it is a media range..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.CannotUseNullValueType">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; type cannot accept a null value for the value type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.CookieInvalidName">
            <summary>
              Looks up a localized string similar to The specified value is not a valid cookie name..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.CookieNull">
            <summary>
              Looks up a localized string similar to Cookie cannot be null..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.DelegatingHandlerArrayContainsNullItem">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; list is invalid because it contains one or more null items..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.DelegatingHandlerArrayHasNonNullInnerHandler">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; list is invalid because the property &apos;{1}&apos; of &apos;{2}&apos; is not null..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ErrorReadingFormUrlEncodedStream">
            <summary>
              Looks up a localized string similar to Error reading HTML form URL-encoded data stream..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.FormUrlEncodedMismatchingTypes">
            <summary>
              Looks up a localized string similar to Mismatched types at node &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.FormUrlEncodedParseError">
            <summary>
              Looks up a localized string similar to Error parsing HTML form URL-encoded data, byte {0}..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.HttpInvalidStatusCode">
            <summary>
              Looks up a localized string similar to Invalid HTTP status code: &apos;{0}&apos;. The status code must be between {1} and {2}..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.HttpInvalidVersion">
            <summary>
              Looks up a localized string similar to Invalid HTTP version: &apos;{0}&apos;. The version must start with the characters &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.HttpMessageContentAlreadyRead">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; of the &apos;{1}&apos; has already been read..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.HttpMessageContentStreamMustBeSeekable">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; must be seekable in order to create an &apos;{1}&apos; instance containing an entity body.  .
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.HttpMessageErrorReading">
            <summary>
              Looks up a localized string similar to Error reading HTTP message..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.HttpMessageInvalidMediaType">
            <summary>
              Looks up a localized string similar to Invalid &apos;{0}&apos; instance provided. It does not have a content type header with a value of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.HttpMessageParserEmptyUri">
            <summary>
              Looks up a localized string similar to HTTP Request URI cannot be an empty string..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.HttpMessageParserError">
            <summary>
              Looks up a localized string similar to Error parsing HTTP message header byte {0} of message {1}..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.HttpMessageParserInvalidHostCount">
            <summary>
              Looks up a localized string similar to An invalid number of &apos;{0}&apos; header fields were present in the HTTP Request. It must contain exactly one &apos;{0}&apos; header field but found {1}..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.HttpMessageParserInvalidUriScheme">
            <summary>
              Looks up a localized string similar to Invalid URI scheme: &apos;{0}&apos;. The URI scheme must be a valid &apos;{1}&apos; scheme..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.InvalidArrayInsert">
            <summary>
              Looks up a localized string similar to Invalid array at node &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.JQuery13CompatModeNotSupportNestedJson">
            <summary>
              Looks up a localized string similar to Traditional style array without &apos;[]&apos; is not supported with nested object at location {0}..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.JsonSerializerFactoryReturnedNull">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; method returned null. It must return a JSON serializer instance..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.JsonSerializerFactoryThrew">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; method threw an exception when attempting to create a JSON serializer..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MaxDepthExceeded">
            <summary>
              Looks up a localized string similar to The maximum read depth ({0}) has been exceeded because the form url-encoded data being read has more levels of nesting than is allowed..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MaxHttpCollectionKeyLimitReached">
            <summary>
              Looks up a localized string similar to The number of keys in a NameValueCollection has exceeded the limit of &apos;{0}&apos;. You can adjust it by modifying the MaxHttpCollectionKeys property on the &apos;{1}&apos; class..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MediaTypeFormatter_BsonParseError_MissingData">
            <summary>
              Looks up a localized string similar to Error parsing BSON data; unable to read content as a {0}..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MediaTypeFormatter_BsonParseError_UnexpectedData">
            <summary>
              Looks up a localized string similar to Error parsing BSON data; unexpected dictionary content: {0} entries, first key &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MediaTypeFormatter_JsonReaderFactoryReturnedNull">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; method returned null. It must return a JSON reader instance..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MediaTypeFormatter_JsonWriterFactoryReturnedNull">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; method returned null. It must return a JSON writer instance..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MediaTypeFormatterCannotRead">
            <summary>
              Looks up a localized string similar to The media type formatter of type &apos;{0}&apos; does not support reading because it does not implement the ReadFromStreamAsync method..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MediaTypeFormatterCannotReadSync">
            <summary>
              Looks up a localized string similar to The media type formatter of type &apos;{0}&apos; does not support reading because it does not implement the ReadFromStream method..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MediaTypeFormatterCannotWrite">
            <summary>
              Looks up a localized string similar to The media type formatter of type &apos;{0}&apos; does not support writing because it does not implement the WriteToStreamAsync method..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MediaTypeFormatterCannotWriteSync">
            <summary>
              Looks up a localized string similar to The media type formatter of type &apos;{0}&apos; does not support writing because it does not implement the WriteToStream method..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MediaTypeFormatterNoEncoding">
            <summary>
              Looks up a localized string similar to No encoding found for media type formatter &apos;{0}&apos;. There must be at least one supported encoding registered in order for the media type formatter to read or write content..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MimeMultipartParserBadBoundary">
            <summary>
              Looks up a localized string similar to MIME multipart boundary cannot end with an empty space..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MultipartFormDataStreamProviderNoContentDisposition">
            <summary>
              Looks up a localized string similar to Did not find required &apos;{0}&apos; header field in MIME multipart body part..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.MultipartStreamProviderInvalidLocalFileName">
            <summary>
              Looks up a localized string similar to Could not determine a valid local file name for the multipart body part..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.NestedBracketNotValid">
            <summary>
              Looks up a localized string similar to Nested bracket is not valid for &apos;{0}&apos; data at position {1}..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.NonNullUriRequiredForMediaTypeMapping">
            <summary>
              Looks up a localized string similar to A non-null request URI must be provided to determine if a &apos;{0}&apos; matches a given request or response message..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.NoReadSerializerAvailable">
            <summary>
              Looks up a localized string similar to No MediaTypeFormatter is available to read an object of type &apos;{0}&apos; from content with media type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ObjectAndTypeDisagree">
            <summary>
              Looks up a localized string similar to An object of type &apos;{0}&apos; cannot be used with a type parameter of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ObjectContent_FormatterCannotWriteType">
            <summary>
              Looks up a localized string similar to The configured formatter &apos;{0}&apos; cannot write an object of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.QueryStringNameShouldNotNull">
            <summary>
              Looks up a localized string similar to Query string name cannot be null..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsHttpMessageUnexpectedTermination">
            <summary>
              Looks up a localized string similar to Unexpected end of HTTP message stream. HTTP message is not complete..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsMimeMultipartArgumentNoBoundary">
            <summary>
              Looks up a localized string similar to Invalid &apos;{0}&apos; instance provided. It does not have a &apos;{1}&apos; content-type header with a &apos;{2}&apos; parameter..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsMimeMultipartArgumentNoContentType">
            <summary>
              Looks up a localized string similar to Invalid &apos;{0}&apos; instance provided. It does not have a content-type header value. &apos;{0}&apos; instances must have a content-type header starting with &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsMimeMultipartArgumentNoMultipart">
            <summary>
              Looks up a localized string similar to Invalid &apos;{0}&apos; instance provided. It does not have a content type header starting with &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsMimeMultipartErrorReading">
            <summary>
              Looks up a localized string similar to Error reading MIME multipart body part..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsMimeMultipartErrorWriting">
            <summary>
              Looks up a localized string similar to Error writing MIME multipart body part to output stream..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsMimeMultipartHeaderParseError">
            <summary>
              Looks up a localized string similar to Error parsing MIME multipart body part header byte {0} of data segment {1}..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsMimeMultipartParseError">
            <summary>
              Looks up a localized string similar to Error parsing MIME multipart message byte {0} of data segment {1}..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsMimeMultipartStreamProviderException">
            <summary>
              Looks up a localized string similar to The stream provider of type &apos;{0}&apos; threw an exception..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsMimeMultipartStreamProviderNull">
            <summary>
              Looks up a localized string similar to The stream provider of type &apos;{0}&apos; returned null. It must return a writable &apos;{1}&apos; instance..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsMimeMultipartStreamProviderReadOnly">
            <summary>
              Looks up a localized string similar to The stream provider of type &apos;{0}&apos; returned a read-only stream. It must return a writable &apos;{1}&apos; instance..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.ReadAsMimeMultipartUnexpectedTermination">
            <summary>
              Looks up a localized string similar to Unexpected end of MIME multipart stream. MIME multipart message is not complete..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.RemoteStreamInfoCannotBeNull">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; method in &apos;{1}&apos; returned null. It must return a RemoteStreamResult instance containing a writable stream and a valid URL..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.SerializerCannotSerializeType">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; serializer cannot serialize the type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.UnMatchedBracketNotValid">
            <summary>
              Looks up a localized string similar to There is an unmatched opened bracket for the &apos;{0}&apos; at position {1}..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.UnsupportedIndent">
            <summary>
              Looks up a localized string similar to Indentation is not supported by &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.XmlMediaTypeFormatter_InvalidSerializerType">
            <summary>
              Looks up a localized string similar to The object of type &apos;{0}&apos; returned by {1} must be an instance of either XmlObjectSerializer or XmlSerializer..
            </summary>
        </member>
        <member name="P:System.Net.Http.Properties.Resources.XmlMediaTypeFormatter_NullReturnedSerializer">
            <summary>
              Looks up a localized string similar to The object returned by {0} must not be a null value..
            </summary>
        </member>
    </members>
</doc>
